const fs = require('fs');
const path = require('path');

const FILE_PATH = path.join(__dirname, 'main.mx');

class Parser {
  src = '';
  tokens = [];
  char = '';
  idx = 0;

  constructor(content) {
    this.src = content.replaceAll('\n');
    this.char = content[0];
  }

  ahead() {
    this.idx += 1;
    this.char = this.src[this.idx];
  }

  parse() {
    while (this.idx < this.src.length) {
      if (this.char === ' ') {
        this.ahead();
        continue;
      }
      if (this.char === '#') {
        let depth = 0;
        let value = '';
        while (this.char === '#' && this.idx < this.src.length) {
          depth += 1;
          this.ahead();
        }
        while (this.char === ' ' && this.idx < this.src.length) {
          this.ahead();
        }
        while (
          this.char?.indexOf('\r') === -1 &&
          // this.char !== '#' &&
          this.idx < this.src.length
        ) {
          value += this.char;
          this.ahead();
        }
        this.tokens.push({
          depth,
          value,
        });
      }
      this.ahead();
    }

    return this;
  }

  generate() {
    let depths = {
      1: 'h1',
      2: 'h2',
      3: 'h3',
      4: 'h4',
      5: 'h5',
    };
    let maxDepth = 5;

    return this.tokens.map((t) => {
      let tag = depths[t.depth > maxDepth ? maxDepth : t.depth];
      let madeTag = `<${tag}>${t.value}</${tag}>`;
      return madeTag;
    });
  }

  toHtml(tags) {
    const html = `
    <html lang="en">
    <head>
    <title>Generated by MXhtml</title>
    </head>
    <body>
    ${tags.join('\n')}
    </body>
    </html>
    `;
    fs.writeFileSync(path.join(process.cwd(), 'index.html'), html, {
      encoding: 'utf-8',
      flag: 'w+',
    });
  }

  static watch(callback) {
    let prevTime = fs.statSync(FILE_PATH).mtimeMs;
    let count = 1;
    setInterval(() => {
      let nowTime = fs.statSync(FILE_PATH).mtimeMs;
      if (nowTime > prevTime) {
        console.log(`${count} CHANGES DETECTED!! RUNNING CALLBACK!! `);
        prevTime = nowTime;
        count += 1;
        callback();
      }
    }, 1000);
  }
}

Parser.watch(() => {
  const content = fs.readFileSync(FILE_PATH, {
    encoding: 'utf8',
  });
  const parser = new Parser(content);
  const tags = parser.parse().generate();
  parser.toHtml(tags);
});
